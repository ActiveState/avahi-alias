#!/usr/bin/env python
#
# avahi-alias.py - based on the script from http://www.avahi.org/wiki/Examples/PythonPublishAlias

import avahi, dbus
from encodings.idna import ToASCII
import time, sys, os, locale
from xml.etree.ElementTree import ElementTree

import logging
logging.basicConfig(level=logging.WARNING)

# Path we'll check for services with host-names
service_path = "/etc/avahi/services"

# Got these from /usr/include/avahi-common/defs.h
CLASS_IN = 0x01
TYPE_CNAME = 0x05

TTL = 60

def publish_cname(cname):
	bus = dbus.SystemBus()
	server = dbus.Interface(bus.get_object(avahi.DBUS_NAME, avahi.DBUS_PATH_SERVER),
			avahi.DBUS_INTERFACE_SERVER)
	group = dbus.Interface(bus.get_object(avahi.DBUS_NAME, server.EntryGroupNew()),
			avahi.DBUS_INTERFACE_ENTRY_GROUP)

	rdata = createRR(server.GetHostNameFqdn())
	cname = encode_dns(cname)

	group.AddRecord(avahi.IF_UNSPEC, avahi.PROTO_UNSPEC, dbus.UInt32(0),
		cname, CLASS_IN, TYPE_CNAME, TTL, rdata)
	group.Commit()


def encode_dns(name):
	out = []
	for part in name.split('.'):
		if len(part) == 0: continue
		out.append(ToASCII(part))
	return '.'.join(out)

def createRR(name):
	out = []
	for part in name.split('.'):
		if len(part) == 0: continue
		out.append(chr(len(part)))
		out.append(ToASCII(part))
	out.append('\0')
	return ''.join(out)

def get_service_hostnames():
	# returns a list of hostname if found
	hostnames = []
	for service in os.listdir(service_path):
		tree = ElementTree()
		try:
			tree.parse("/".join((service_path, service)))
		except Exception, e:
			logging.warning("Unable to read file: %s" % "/".join((service_path, service)))
			continue
		is_cname = tree.getroot().findtext('service/subtype')
		if is_cname is not None and is_cname.find("_cname") > -1:
			hostname = tree.getroot().findtext('service/host-name')
			if hostname is not None:
				logging.debug("Found hostname '%s' in %s." % (hostname, "/".join((service_path, service))))
				hostnames.append(hostname)
	return hostnames

if __name__ == '__main__':
	try:
		# Just loop forever
		while 1: 
			cnames = get_service_hostnames()
			if len(cnames) > 0:
				for cname in cnames:
					name = unicode(cname, locale.getpreferredencoding())
					logging.info("Publishing cname '%s'" % name)
					publish_cname(name)
			time.sleep( TTL - 5 )
	except KeyboardInterrupt:
		logging.info("Exiting")
